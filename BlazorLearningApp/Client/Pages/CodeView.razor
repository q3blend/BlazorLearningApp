@page "/code/{Id}"
@using BlazorLearningApp.Shared.Model
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<h3>Code View</h3>
<div class="form-inline">
    <input class="form-control" readonly type="text" value="@text" />
    <button type="button" class="btn btn-primary" @onclick="CopyTextToClipboard">Copy</button>
</div>
<textarea @bind="@CurrentValue" id="postform-text" autofocus="" aria-required="true" style="overflow: hidden; overflow-wrap: break-word; height: 90%;width: 90%;margin-top:12px;" @oninput="Send"></textarea>
<div class="form-inline">
</div>


@code {
    [Parameter]
    public string Id { get; set; }

    private HubConnection hubConnection;
    private Timer timer;
    private string OldValue;
    private string CurrentValue { get; set; }
    private string text = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        this.text = NavigationManager.Uri;
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"/codesharehub?codeId={this.Id}"))
        .Build();

        hubConnection.On<string>("ReceiveMessage", (code) =>
        {
            this.CurrentValue = code;
            this.OldValue = code;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        // init timer
        timer = new Timer();
        timer.Interval = 200;
        timer.Elapsed += OnTimerInterval;
        timer.AutoReset = true;
        // Start the timer
        timer.Start();
    }

    private async void OnTimerInterval(object sender, ElapsedEventArgs e)
    {
        if (this.OldValue != this.CurrentValue)
        {
            this.OldValue = this.CurrentValue;
            await hubConnection.SendAsync("SendUpdate", this.CurrentValue, this.Id);
        }
    }

    void Send(ChangeEventArgs e)
    {
        CurrentValue = (string)e.Value;
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private async Task CopyTextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }
}
